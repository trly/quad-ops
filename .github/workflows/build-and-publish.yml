name: Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Clean Go cache directories to prevent conflicts
      - name: Clean Go Cache
        run: |
          mkdir -p $HOME/.cache/go-build
          rm -rf $HOME/.cache/go-build/*
          mkdir -p $HOME/go/pkg
          rm -rf $HOME/go/pkg/mod

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'
          # Disable automatic caching to avoid race conditions
          cache: false

      # Manually install dependencies to avoid concurrent access issues
      - name: Download Dependencies
        run: go mod download -x

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
          # Skip installing from the binary to avoid the tool downloading the same dependencies
          skip-pkg-cache: true
          skip-build-cache: true

  build:
    runs-on: ubuntu-latest
    # Explicitly depend on lint job to ensure sequential execution
    needs: lint
    steps:
      - uses: actions/checkout@v4

      # Clean Go cache directories to prevent conflicts
      - name: Clean Go Cache
        run: |
          mkdir -p $HOME/.cache/go-build
          rm -rf $HOME/.cache/go-build/*
          mkdir -p $HOME/go/pkg
          rm -rf $HOME/go/pkg/mod

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'
          cache: false

      # Manually install dependencies to avoid concurrent access issues
      - name: Download Dependencies
        run: go mod download -x

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

  release-binaries:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        arch: [amd64, arm64]
        os: [linux]
      # Prevent parallel execution to avoid cache conflicts
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4

      # Clean Go cache directories to prevent conflicts
      - name: Clean Go Cache
        run: |
          mkdir -p $HOME/.cache/go-build
          rm -rf $HOME/.cache/go-build/*
          mkdir -p $HOME/go/pkg
          rm -rf $HOME/go/pkg/mod

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'
          cache: false

      # Manually install dependencies to avoid concurrent access issues
      - name: Download Dependencies
        run: go mod download -x

      - name: Build Binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0 # Disable CGO for better cross-compilation compatibility
        run: |
          go build -o quad-ops-${{ matrix.os }}-${{ matrix.arch }}

      - name: Upload Binary
        uses: actions/upload-artifact@v3
        with:
          name: quad-ops-${{ matrix.os }}-${{ matrix.arch }}
          path: quad-ops-${{ matrix.os }}-${{ matrix.arch }}

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: quad-ops-${{ matrix.os }}-${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'
          cache: false

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}